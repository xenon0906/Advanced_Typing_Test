import sys
import matplotlib.pyplot as plt
import os
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas
from reportlab.lib.units import inch

# File to store typing speeds
speed_file = 'typing_speeds.txt'
pdf_file = 'typing_test_report.pdf'

def record_speed(user_name, wpm):
    with open(speed_file, 'a') as file:
        file.write(f"{user_name}: {wpm}\n")

def plot_speeds():
    if not os.path.exists(speed_file):
        print("No speed data found.")
        return

    with open(speed_file, 'r') as file:
        lines = file.readlines()
        
    names, speeds = [], []
    for line in lines:
        parts = line.strip().split(':')
        if len(parts) == 2:
            names.append(parts[0])
            speeds.append(float(parts[1]))

    unique_names = list(set(names))
    colors = plt.cm.tab10(range(len(unique_names)))

    plt.figure(figsize=(12, 6))
    for i, name in enumerate(unique_names):
        name_speeds = [speeds[j] for j in range(len(names)) if names[j] == name]
        plt.plot(range(1, len(name_speeds) + 1), name_speeds, marker='o', linestyle='-', color=colors[i], label=name)
        
    plt.title('Typing Speeds Over Time', fontsize=16, weight='bold')
    plt.xlabel('Attempt Number', fontsize=14)
    plt.ylabel('Words Per Minute (WPM)', fontsize=14)
    plt.xticks(range(1, len(speeds) + 1), [f'Attempt {i}' for i in range(1, len(speeds) + 1)], fontsize=12)
    plt.yticks(fontsize=12)
    plt.grid(True, which='both', linestyle='--', linewidth=0.5)
    plt.legend(title='Participants', title_fontsize='13', fontsize='11', loc='upper left')
    plt.tight_layout()
    plt.savefig('typing_speeds.png')
    plt.show()

def create_pdf_report(user_name, sentence, my_sentence, wpm, seconds):
    c = canvas.Canvas(pdf_file, pagesize=letter)
    width, height = letter

    c.setFont("Helvetica-Bold", 18)
    c.drawString(50, height - 50, "Typing Test Report")
    c.setFont("Helvetica", 12)

    # Descriptive paragraph
    c.drawString(50, height - 100, f"Name: {user_name}")
    c.drawString(50, height - 130, f"Sentence: \"{sentence}\"")
    c.drawString(50, height - 160, f"Time Taken: {seconds:.2f} seconds")
    c.drawString(50, height - 190, f"Words Per Minute (WPM): {wpm:.2f}")

    # Accuracy calculation
    if sentence == my_sentence:
        c.setFont("Helvetica-Bold", 12)
        c.drawString(50, height - 220, "Accuracy: 100%")
    else:
        correct_chars = sum(1 for a, b in zip(sentence, my_sentence) if a == b)
        accuracy = (correct_chars / len(sentence)) * 100
        c.drawString(50, height - 220, f"Accuracy: {accuracy:.2f}%")

    # Descriptive Analysis
    c.setFont("Helvetica", 12)
    y = height - 250
    c.drawString(50, y, "Analysis:")
    y -= 20
    c.drawString(50, y, f"The typing test measures your speed and accuracy in typing the given sentence.")
    y -= 20
    c.drawString(50, y, f"Your typing speed is {wpm:.2f} WPM, and it took you {seconds:.2f} seconds to complete.")
    y -= 20
    c.drawString(50, y, f"The accuracy reflects how many characters you typed correctly compared to the given sentence.")

    # Adding graph image
    if os.path.exists('typing_speeds.png'):
        c.drawImage('typing_speeds.png', 50, y - 150, width=6*inch, height=3*inch)

    # Ending note
    c.setFont("Helvetica-Bold", 12)
    y -= 200
    c.drawString(50, y, "Report generated by Siddhanth")
    
    c.save()

if __name__ == "__main__":
    if len(sys.argv) > 3:
        user_name = sys.argv[1]
        try:
            wpm = float(sys.argv[2])
            seconds = float(sys.argv[3])
            record_speed(user_name, wpm)
            # Generate a PDF report for the last entry
            create_pdf_report(user_name, "Hello, this is my channel", "User's Typing", wpm, seconds)
        except ValueError:
            print("Invalid WPM or seconds value provided.")
    else:
        print("Insufficient arguments provided. Ensure that you pass the user name, WPM, and time.")
    
    plot_speeds()
